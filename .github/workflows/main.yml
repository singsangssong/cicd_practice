name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main, dev ]

# 환경설정
#env:
#  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/spring-auto-deploy
#  VERSION: ${{ github.sha }}
#  NAME: go_cicd

permissions:
  contents: read

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - name: Checkout
        uses: actions/checkout@v3

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      # application-database.yml 파일 생성
      # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
      - name: make application-jwt.yml
        run: |
          cd ./src/main/resources
          touch ./application-jwt.yml
          echo "${{ secrets.DATABASE }}" >> ./application-database.yml
        shell: bash

      # Build 파일 생성하기
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean bootJar

      - name: DockerFile build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy all containers to GCP
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            set -e
            docker-compose down
            sudo docker rm $(sudo docker ps -aq)
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}:latest
            cd ~
            docker-compose up -d
            sudo docker image prune -f

#
#
#      # 디버깅: JAR 파일 확인
#      - name: Check JAR file
#        run: ls -al build/libs/
#
#      # docker build 수행
#      - name: Set up docker buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Cache docker layers
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
#      - name: Login to ghcr
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          builder: ${{ steps.buildx.outputs.name }}
#          push: true
#          tags: ${{ env.DOCKER_IMAGE }}:latest
#          context: .

  # 배포 Job
#  deploy:
#    needs: build  # build 후에 실행되도록 정의
#    name: Deploy
#    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
#    steps:
#      - name: Login to ghcr
#        uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      # 3000 -> 80 포트로 수행하도록 지정
#      - name: Docker run
#        run: |
#          sudo docker stop ${{ env.NAME }} || true
#          sudo docker rm ${{ env.NAME }} || true
#          sudo docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
#          sudo docker run -d -p 80:8080 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
